{
  "tests": [
    {
      "title": "SQL Query 2 - Price and momentum split",
      "input": {
        "timestamp": [
          "2024-01-01T09:30:00",
          "2024-01-01T09:31:00",
          "2024-01-01T09:32:00",
          "2024-01-01T09:33:00",
          "2024-01-01T09:34:00"
        ],
        "market_data#c": [100.0, 101.0, 99.5, 102.0, 101.5],
        "market_data#v": [150000.0, 80000.0, 200000.0, 120000.0, 90000.0]
      },
      "expect": {
        "type": "dataframe",
        "columns": {
          "timestamp": [
            "2024-01-01 09:30:00.000000000",
            "2024-01-01 09:31:00.000000000",
            "2024-01-01 09:32:00.000000000",
            "2024-01-01 09:33:00.000000000",
            "2024-01-01 09:34:00.000000000"
          ],
          "price_momentum#output0": [100.0, 101.0, 99.5, 102.0, 101.5],
          "price_momentum#output1": [0.0, 1.0, -1.5, 2.5, -0.5]
        }
      },
      "options": {
        "transform_name": "sql_query_2",
        "sql": "SELECT timestamp, SLOT0 as RESULT0, COALESCE(SLOT0 - LAG(SLOT0, 1) OVER (ORDER BY timestamp), 0) as RESULT1 FROM self",
        "output_id": "price_momentum",
        "inputs": "{SLOT: [market_data#c, market_data#v]}",
        "timeframe": "1Min"
      },
      "timestamp_columns": [
        "timestamp"
      ],
      "index_column": "timestamp"
    },
    {
      "title": "SQL Query 2 - Bid-ask spread analysis",
      "input": {
        "timestamp": [
          "2024-01-01T09:30:00",
          "2024-01-01T09:31:00",
          "2024-01-01T09:32:00",
          "2024-01-01T09:33:00"
        ],
        "quote_data#bid": [99.98, 100.98, 99.48, 101.98],
        "quote_data#ask": [100.02, 101.02, 99.52, 102.02]
      },
      "expect": {
        "type": "dataframe",
        "columns": {
          "timestamp": [
            "2024-01-01 09:30:00.000000000",
            "2024-01-01 09:31:00.000000000",
            "2024-01-01 09:32:00.000000000",
            "2024-01-01 09:33:00.000000000"
          ],
          "spread_analysis#output0": [100.0, 101.0, 99.5, 102.0],
          "spread_analysis#output1": [0.04, 0.04, 0.04, 0.04]
        }
      },
      "options": {
        "transform_name": "sql_query_2",
        "sql": "SELECT timestamp, (SLOT0 + SLOT1) / 2 as RESULT0, SLOT1 - SLOT0 as RESULT1 FROM self",
        "output_id": "spread_analysis",
        "inputs": "{SLOT: [quote_data#bid, quote_data#ask]}",
        "timeframe": "1Min"
      },
      "timestamp_columns": [
        "timestamp"
      ],
      "index_column": "timestamp"
    },
    {
      "title": "SQL Query 2 - Volume profile split",
      "input": {
        "timestamp": [
          "2024-01-01T09:30:00",
          "2024-01-01T09:31:00",
          "2024-01-01T09:32:00",
          "2024-01-01T09:33:00",
          "2024-01-01T09:34:00"
        ],
        "ticker#v": [1000.0, 1500.0, 2000.0, 800.0, 1200.0],
        "ticker#c": [100.0, 101.0, 99.0, 102.0, 101.5],
        "ticker#vw": [100.1, 101.0, 99.1, 102.0, 101.5]
      },
      "expect": {
        "type": "dataframe",
        "columns": {
          "timestamp": [
            "2024-01-01 09:30:00.000000000",
            "2024-01-01 09:31:00.000000000",
            "2024-01-01 09:32:00.000000000",
            "2024-01-01 09:33:00.000000000",
            "2024-01-01 09:34:00.000000000"
          ],
          "volume_profile#output0": [1000.0, 1250.0, 1500.0, 1325.0, 1300.0],
          "volume_profile#output1": [100000.0, 151500.0, 198000.0, 81600.0, 121800.0]
        }
      },
      "options": {
        "transform_name": "sql_query_2",
        "sql": "SELECT timestamp, AVG(SLOT0) OVER (ORDER BY timestamp ROWS UNBOUNDED PRECEDING) as RESULT0, SLOT0 * SLOT1 as RESULT1 FROM self",
        "output_id": "volume_profile",
        "inputs": "{SLOT: [ticker#v, ticker#c, ticker#vw]}",
        "timeframe": "1Min"
      },
      "timestamp_columns": [
        "timestamp"
      ],
      "index_column": "timestamp"
    },
    {
      "title": "SQL Query 2 - High-low range and midpoint",
      "input": {
        "timestamp": [
          "2024-01-01T09:30:00",
          "2024-01-01T09:31:00",
          "2024-01-01T09:32:00",
          "2024-01-01T09:33:00",
          "2024-01-01T09:34:00"
        ],
        "ohlc_feed#h": [101.0, 101.5, 100.2, 102.5, 101.8],
        "ohlc_feed#l": [99.5, 100.5, 99.0, 101.5, 101.0],
        "ohlc_feed#c": [100.5, 101.2, 99.8, 102.3, 101.5]
      },
      "expect": {
        "type": "dataframe",
        "columns": {
          "timestamp": [
            "2024-01-01 09:30:00.000000000",
            "2024-01-01 09:31:00.000000000",
            "2024-01-01 09:32:00.000000000",
            "2024-01-01 09:33:00.000000000",
            "2024-01-01 09:34:00.000000000"
          ],
          "range_analysis#output0": [100.25, 101.0, 99.6, 102.0, 101.4],
          "range_analysis#output1": [1.5, 1.0, 1.2, 1.0, 0.8]
        }
      },
      "options": {
        "transform_name": "sql_query_2",
        "sql": "SELECT timestamp, (SLOT0 + SLOT1) / 2 as RESULT0, SLOT0 - SLOT1 as RESULT1 FROM self",
        "output_id": "range_analysis",
        "inputs": "{SLOT: [ohlc_feed#h, ohlc_feed#l, ohlc_feed#c]}",
        "timeframe": "1Min"
      },
      "timestamp_columns": [
        "timestamp"
      ],
      "index_column": "timestamp"
    }
  ]
}