{
  "tests": [
    {
      "title": "SQL Query 4 - Complete OHLC timeseries",
      "input": {
        "timestamp": [
          "2024-01-01T09:30:00",
          "2024-01-01T09:31:00",
          "2024-01-01T09:32:00",
          "2024-01-01T09:33:00",
          "2024-01-01T09:34:00"
        ],
        "feed_data#o": [100.0, 100.5, 101.2, 99.8, 102.3],
        "feed_data#h": [100.8, 101.5, 101.5, 100.2, 102.8],
        "feed_data#l": [99.5, 100.3, 99.8, 99.0, 101.8],
        "feed_data#c": [100.5, 101.2, 99.8, 102.3, 102.0]
      },
      "expect": {
        "type": "dataframe",
        "columns": {
          "ohlc_timeseries#output0": [100.0, 100.5, 101.2, 99.8, 102.3],
          "ohlc_timeseries#output1": [100.8, 101.5, 101.5, 100.2, 102.8],
          "ohlc_timeseries#output2": [99.5, 100.3, 99.8, 99.0, 101.8],
          "ohlc_timeseries#output3": [100.5, 101.2, 99.8, 102.3, 102.0]
        }
      },
      "options": {
        "transform_name": "sql_query_4",
        "sql": "SELECT timestamp, input0 as output0, input1 as output1, input2 as output2, input3 as output3 FROM table ORDER BY timestamp",
        "output_id": "ohlc_timeseries",
        "inputs": "{SLOT: [feed_data#o, feed_data#h, feed_data#l, feed_data#c]}",
        "timeframe": "1Min"
      },
      "timestamp_columns": [
        "timestamp"
      ],
      "index_column": "timestamp"
    },
    {
      "title": "SQL Query 4 - MACD components",
      "input": {
        "timestamp": [
          "2024-01-01T09:30:00",
          "2024-01-01T09:31:00",
          "2024-01-01T09:32:00",
          "2024-01-01T09:33:00",
          "2024-01-01T09:34:00",
          "2024-01-01T09:35:00",
          "2024-01-01T09:36:00"
        ],
        "price_stream#c": [100.0, 100.5, 101.0, 100.8, 101.5, 102.0, 101.8],
        "price_stream#v": [150000.0, 120000.0, 180000.0, 100000.0, 140000.0, 160000.0, 110000.0]
      },
      "expect": {
        "type": "dataframe",
        "columns": {
          "macd_components#output0": [100.0, 100.5, 101.0, 100.8, 101.5, 102.0, 101.8],
          "macd_components#output1": [100.0, 100.25, 100.5, 100.77, 101.1, 101.43, 101.77],
          "macd_components#output2": [100.0, 100.25, 100.5, 100.58, 100.76, 101.16, 101.42],
          "macd_components#output3": [0.0, 0.0, 0.0, 0.19, 0.34, 0.27, 0.35]
        }
      },
      "options": {
        "transform_name": "sql_query_4",
        "sql": "SELECT timestamp, input0 as output0, ROUND(AVG(input0) OVER (ORDER BY timestamp ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 2) as output1, ROUND(AVG(input0) OVER (ORDER BY timestamp ROWS BETWEEN 4 PRECEDING AND CURRENT ROW), 2) as output2, ROUND(AVG(input0) OVER (ORDER BY timestamp ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) - AVG(input0) OVER (ORDER BY timestamp ROWS BETWEEN 4 PRECEDING AND CURRENT ROW), 2) as output3 FROM table",
        "output_id": "macd_components",
        "inputs": "{SLOT: [price_stream#c, price_stream#v]}",
        "timeframe": "1Min"
      },
      "timestamp_columns": [
        "timestamp"
      ],
      "index_column": "timestamp"
    },
    {
      "title": "SQL Query 4 - Volume analysis metrics",
      "input": {
        "timestamp": [
          "2024-01-01T09:30:00",
          "2024-01-01T09:31:00",
          "2024-01-01T09:32:00",
          "2024-01-01T09:33:00",
          "2024-01-01T09:34:00"
        ],
        "market_data#c": [100.0, 101.0, 99.0, 102.0, 101.5],
        "market_data#v": [1000.0, 1500.0, 2000.0, 800.0, 1200.0],
        "market_data#trades": [50.0, 75.0, 120.0, 40.0, 65.0],
        "market_data#vw": [100.1, 101.0, 99.1, 102.0, 101.5]
      },
      "expect": {
        "type": "dataframe",
        "columns": {
          "volume_analysis#output0": [100000.0, 151500.0, 198000.0, 81600.0, 121800.0],
          "volume_analysis#output1": [20.0, 20.0, 16.67, 20.0, 18.46],
          "volume_analysis#output2": [100.0, 100.6, 99.89, 100.21, 100.45],
          "volume_analysis#output3": [1000.0, 1250.0, 1500.0, 1325.0, 1300.0]
        }
      },
      "options": {
        "transform_name": "sql_query_4",
        "sql": "SELECT timestamp, input0 * input1 as output0, ROUND(input1 / input2, 2) as output1, ROUND(SUM(input0 * input1) OVER (ORDER BY timestamp ROWS UNBOUNDED PRECEDING) / SUM(input1) OVER (ORDER BY timestamp ROWS UNBOUNDED PRECEDING), 2) as output2, AVG(input1) OVER (ORDER BY timestamp ROWS UNBOUNDED PRECEDING) as output3 FROM table",
        "output_id": "volume_analysis",
        "inputs": "{SLOT: [market_data#c, market_data#v, market_data#trades, market_data#vw]}",
        "timeframe": "1Min"
      },
      "timestamp_columns": [
        "timestamp"
      ],
      "index_column": "timestamp"
    },
    {
      "title": "SQL Query 4 - Market regime indicators",
      "input": {
        "timestamp": [
          "2024-01-01T09:30:00",
          "2024-01-01T09:31:00",
          "2024-01-01T09:32:00",
          "2024-01-01T09:33:00",
          "2024-01-01T09:34:00"
        ],
        "ticker#c": [100.0, 102.0, 101.0, 103.0, 102.5],
        "ticker#v": [1000.0, 2000.0, 1500.0, 2500.0, 1200.0],
        "ticker#volatility": [0.5, 0.8, 0.6, 1.0, 0.7],
        "ticker#vw": [100.1, 102.0, 101.0, 103.0, 102.5]
      },
      "expect": {
        "type": "dataframe",
        "columns": {
          "regime_indicators#output0": [0.0, 2.0, -1.0, 2.0, -0.5],
          "regime_indicators#output1": [1000.0, 1500.0, 1500.0, 1750.0, 1640.0],
          "regime_indicators#output2": [0.5, 0.65, 0.6333, 0.725, 0.72],
          "regime_indicators#output3": [0, 1, 0, 1, 0]
        }
      },
      "options": {
        "transform_name": "sql_query_4",
        "sql": "SELECT timestamp, COALESCE(input0 - LAG(input0, 1) OVER (ORDER BY timestamp), 0) as output0, AVG(input1) OVER (ORDER BY timestamp ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) as output1, AVG(input2) OVER (ORDER BY timestamp ROWS UNBOUNDED PRECEDING) as output2, CASE WHEN COALESCE(input0 - LAG(input0, 1) OVER (ORDER BY timestamp), 0) > 0 THEN 1 ELSE 0 END as output3 FROM table",
        "output_id": "regime_indicators",
        "inputs": "{SLOT: [ticker#c, ticker#v, ticker#volatility, ticker#vw]}",
        "timeframe": "1Min"
      },
      "timestamp_columns": [
        "timestamp"
      ],
      "index_column": "timestamp"
    },
    {
      "title": "SQL Query 4 - Intraday statistics",
      "input": {
        "timestamp": [
          "2024-01-01T09:30:00",
          "2024-01-01T09:31:00",
          "2024-01-01T09:32:00",
          "2024-01-01T09:33:00",
          "2024-01-01T09:34:00",
          "2024-01-01T09:35:00"
        ],
        "ohlc_feed#o": [100.0, 102.0, 101.0, 103.0, 102.5, 101.5],
        "ohlc_feed#h": [102.0, 102.5, 103.0, 103.5, 103.0, 102.0],
        "ohlc_feed#l": [99.5, 101.5, 100.5, 102.5, 102.0, 101.0],
        "ohlc_feed#c": [100.0, 102.0, 101.0, 103.0, 102.5, 101.5]
      },
      "expect": {
        "type": "dataframe",
        "columns": {
          "intraday_stats#output0":  [100.0000, 101.0000, 101.0000, 101.5000, 101.7000, 101.6670],
          "intraday_stats#output1": [100.0, 102.0, 102.0, 103.0, 103.0, 103.0],
          "intraday_stats#output2": [100.0, 100.0, 100.0, 100.0, 100.0, 100.0],
          "intraday_stats#output3": [0, 1, 2, 3, 4, 5]
        }
      },
      "options": {
        "transform_name": "sql_query_4",
        "sql": "SELECT timestamp, ROUND(AVG(input3) OVER (ORDER BY timestamp ROWS UNBOUNDED PRECEDING), 3) as output0, MAX(input3) OVER (ORDER BY timestamp ROWS UNBOUNDED PRECEDING) as output1, MIN(input3) OVER (ORDER BY timestamp ROWS UNBOUNDED PRECEDING) as output2, ROW_NUMBER() OVER (ORDER BY timestamp) - 1 as output3 FROM table",
        "output_id": "intraday_stats",
        "inputs": "{SLOT: [ohlc_feed#o, ohlc_feed#h, ohlc_feed#l, ohlc_feed#c]}",
        "timeframe": "1Min"
      },
      "timestamp_columns": [
        "timestamp"
      ],
      "index_column": "timestamp"
    }
  ]
}