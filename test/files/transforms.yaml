bband_percent:
  name: Bollinger Bands %B
  desc: "Measures position within Bollinger Bands as a normalized value between 0 and 1. Values above 1 or below 0 indicate extreme conditions."
  inputs: 
    - { type: Decimal, id: bbands_lower, name: Lower Band, allowMultipleConnections: false }
    - { type: Decimal, id: bbands_upper, name: Upper Band, allowMultipleConnections: false }
  outputs: [DECIMAL_RESULT]
  tags: ["indicator", "bollinger", "bands", "oscillator", "normalized"]
  category: Volatility
  renderKind: Simple
  plotKind: bb_percent_b
  requiresTimeFrame: true
  requiredDataSources: [ "c" ]

bband_width:
  name: Bollinger Bands Width
  desc: "Measures the width of Bollinger Bands to identify volatility expansion and contraction. Narrows during low volatility and widens during high volatility."
  inputs: 
    - { type: Decimal, id: bbands_lower, name: Lower Band, allowMultipleConnections: false }
    - { type: Decimal, id: bbands_middle, name: Middle Band, allowMultipleConnections: false }
    - { type: Decimal, id: bbands_upper, name: Upper Band, allowMultipleConnections: false }
  outputs: [DECIMAL_RESULT]
  tags: ["indicator", "bollinger", "bands", "volatility", "squeeze"]
  category: Volatility
  renderKind: Simple
  plotKind: panel_line

cs_momentum:
  name: Cross-Sectional Momentum
  desc: "Calculates momentum turns across multiple assets in the same time period, enabling relative performance comparison within a universe of securities."
  isCrossSectional: true
  inputs: 
    - { type: Decimal, id: "*", name: "Returns", allowMultipleConnections: false }
  outputs: [DECIMAL_RESULT]
  tags: ["indicator", "cross-sectional", "momentum", "relative-performance", "multi-asset"]
  category: Momentum
  renderKind: Simple
  plotKind: panel_line

top_k:
  name: Top K Assets
  desc: "Selects the top K assets based on their values. Useful for identifying the best performing assets in a universe."
  options:
    - { id: k, name: "Count", type: Integer, default: 10, min: 1, max: 1000, step_size: 1 }
  inputs: 
    - { type: Decimal, id: "*", name: "Values", allowMultipleConnections: false }
  outputs: [BOOLEAN_RESULT]
  tags: ["indicator", "top-k", "assets", "performance", "selection", "best"]
  category: Momentum
  renderKind: Standard
  isCrossSectional: true

bottom_k:
  name: Bottom K Assets
  desc: "Selects the bottom K assets based on their values. Useful for identifying the worst performing assets in a universe."
  options:
    - { id: k, name: "Count", type: Integer, default: 10, min: 1, max: 1000, step_size: 1 }
  inputs: 
    - { type: Decimal, id: "*", name: "Values", allowMultipleConnections: false }
  outputs: [BOOLEAN_RESULT]
  tags: ["indicator", "bottom-k", "assets", "performance", "selection", "worst"]
  category: Momentum
  renderKind: Standard
  isCrossSectional: true

top_k_percent:
  name: Top %K of Assets
  desc: "Selects the top K percent of assets based on their values. Useful for identifying the best performing assets in a universe."
  options:
    - { id: k, name: "Percent", type: Integer, default: 10, min: 1, max: 100, step_size: 1 }
  inputs: 
    - { type: Decimal, id: "*", name: "Values", allowMultipleConnections: false }
  outputs: [BOOLEAN_RESULT]
  tags: ["indicator", "top-k", "assets", "performance", "selection", "best"]
  category: Momentum
  renderKind: Standard
  isCrossSectional: true

bottom_k_percent:
  name: Bottom %K of Assets
  desc: "Selects the bottom K percent of assets based on their values. Useful for identifying the worst performing assets in a universe." 
  options:
    - { id: k, name: "Percent", type: Integer, default: 10, min: 1, max: 100, step_size: 1 }
  inputs: 
    - { type: Decimal, id: "*", name: "Values", allowMultipleConnections: false }
  outputs: [BOOLEAN_RESULT]
  tags: ["indicator", "bottom-k", "assets", "performance", "selection", "worst"]
  category: Momentum
  renderKind: Standard
  isCrossSectional: true

cum_prod:
  name: Cumulative Product
  desc: "Calculates the running product of a series of values. Useful for compounding growth rates or returns over time."
  inputs: [NUMBER]
  outputs: [DECIMAL_RESULT]
  tags: ["simple", "cumulative", "product", "compounding", "returns"]
  category: Math
  renderKind: Simple

gap_returns:
  name: Gap Returns
  desc: "Measures the price gap between previous close and current open. Identifies overnight or weekend price movements that can signal significant market events."
  outputs: [DECIMAL_RESULT]
  tags: ["indicator", "gap", "returns", "overnight", "price-jump"]
  category: Momentum
  renderKind: Simple
  plotKind: panel_line
  requiresTimeFrame: true
  requiredDataSources: ["c", "o"]

ma:
  name: Moving Average
  options:
    - PERIOD
    - id: type
      name: Type
      type: Select
      default: sma
      required: true
      selectOption:
        - { name: "Double Exponential Moving Average (DEMA)", value: dema }
        - { name: "Exponential Moving Average (EMA)", value: ema }
        - { name: "Hull Moving Average (HMA)", value: hma }
        - { name: "Kaufman's Adaptive Moving Average (KAMA)", value: kama }
        - { name: "Simple Moving Average (SMA)", value: sma }
        - { name: "Triple Exponential Moving Average (TEMA)", value: tema }
        - { name: "Triangular Moving Average (TRIMA)", value: trima }
        - { name: "Weighted Moving Average (WMA)", value: wma }
        - { name: "Zero Lag Exponential Moving Average (ZLEMA)", value: zlema }
  desc: "Calculates average price over specified period with multiple calculation methods. Acts as a trend indicator and noise filter."
  inputs: [NUMBER]
  outputs: [DECIMAL_RESULT]
  tags: ["overlay", "moving-average", "trend", "smoothing", "filter"]
  category: Trend
  renderKind: Standard
  plotKind: line

return_vol:
  name: Return Volatility
  options:
    - PERIOD
  desc: "Measures the standard deviation of returns over a specified period. Quantifies historical volatility for risk assessment."
  outputs: [DECIMAL_RESULT]
  tags: ["indicator", "volatility", "risk", "standard-deviation", "returns"]
  category: Volatility
  renderKind: Standard
  plotKind: panel_line
  requiresTimeFrame: true
  requiredDataSources: ["c"]

price_diff_vol:
  name: Price Difference Volatility
  options:
    - PERIOD
  type: Indicator
  desc: "Calculates the standard deviation of absolute price changes over a specified period. Provides a direct measure of price movement volatility."
  outputs: [DECIMAL_RESULT]
  tags: ["indicator", "volatility", "price-movement", "standard-deviation", "risk"]
  category: Volatility
  renderKind: Standard
  plotKind: panel_line
  requiresTimeFrame: true
  requiredDataSources: ["c"]

# ======== AGGREGATION NODES ======== #
# These nodes combine multiple inputs into a single output

agg_all_of:
  name: All Of
  desc: "Returns true only if all connected inputs are true. Useful for checking if multiple conditions are simultaneously met."
  inputs:
    - { type: Boolean, id: "*", name: "Values", allowMultipleConnections: true }
  outputs: [BOOLEAN_RESULT]
  tags: ["aggregate", "boolean", "logic", "all", "and"]
  category: Aggregate
  renderKind: Simple

agg_any_of:
  name: Any Of
  desc: "Returns true if at least one of the connected inputs is true. Useful for checking if any condition in a set is met."
  inputs:
    - { type: Boolean, id: "*", name: "Values", allowMultipleConnections: true }
  outputs: [BOOLEAN_RESULT]
  tags: ["aggregate", "boolean", "logic", "any", "or"]
  category: Aggregate
  renderKind: Simple

agg_none_of:
  name: None Of
  desc: "Returns true only if all connected inputs are false. Useful for ensuring no conditions in a set are met."
  inputs:
    - { type: Boolean, id: "*", name: "Values", allowMultipleConnections: true }
  outputs: [BOOLEAN_RESULT]
  tags: ["aggregate", "boolean", "logic", "none", "nor"]
  category: Aggregate
  renderKind: Simple

agg_max:
  name: Maximum
  desc: "Returns the maximum value among all connected numeric inputs. Useful for finding the highest value in a set."
  inputs:
    - { type: Decimal, id: "*", name: "Values", allowMultipleConnections: true }
  outputs: [NUMBER_RESULT]
  tags: ["aggregate", "numeric", "math", "maximum", "highest"]
  category: Aggregate
  renderKind: Simple

agg_min:
  name: Minimum
  desc: "Returns the minimum value among all connected numeric inputs. Useful for finding the lowest value in a set."
  inputs:
    - { type: Number, id: "*", name: "Values", allowMultipleConnections: true }
  outputs: [NUMBER_RESULT]
  tags: ["aggregate", "numeric", "math", "minimum", "lowest"]
  category: Aggregate
  renderKind: Simple

agg_sum:
  name: Sum
  desc: "Calculates the sum of all connected numeric inputs. Useful for adding multiple values together."
  inputs:
    - { type: Number, id: "*", name: "Values", allowMultipleConnections: true }
  outputs: [NUMBER_RESULT]
  tags: ["aggregate", "numeric", "math", "sum", "addition"]
  category: Aggregate
  renderKind: Simple

agg_mean:
  name: Mean
  desc: "Calculates the arithmetic mean of all connected numeric inputs. Useful for finding the central value in a set."
  inputs:
    - { type: Number, id: "*", name: "Values", allowMultipleConnections: true }
  outputs: [DECIMAL_RESULT]
  tags: ["aggregate", "numeric", "math", "mean", "average"]
  category: Aggregate
  renderKind: Simple

agg_all_equal:
  name: All Equal
  desc: "Returns true if all connected inputs have the same value. Useful for checking value consistency across multiple sources."
  inputs:
    - { type: Any, id: "*", name: "Values", allowMultipleConnections: true }
  outputs: [BOOLEAN_RESULT]
  tags: ["aggregate", "comparison", "equality", "consistency", "validation"]
  category: Aggregate
  renderKind: Simple

agg_all_unique:
  name: All Unique
  desc: "Returns true if all connected inputs have unique values. Useful for ensuring no duplicates exist in a set of values."
  inputs:
    - { type: Any, id: "*", name: "Values", allowMultipleConnections: true }
  outputs: [BOOLEAN_RESULT]
  tags: ["aggregate", "comparison", "unique", "distinct", "validation"]
  category: Aggregate
  renderKind: Simple

# ======== SELECTION & BRANCHING NODES ======== #
# These nodes route signals based on conditions

percentile_select:
  name: Percentile-Based Select
  desc: "Selects between 'high' and 'low' inputs based on whether a value is above or below a percentile threshold within a lookback period."
  options:
    - id: lookback
      name: Lookback Period
      type: Integer
      default: 14
    - id: percentile
      name: Percentile Threshold
      type: Integer
      default: 80
      min: 0
      max: 100
      step_size: 1
  inputs:
    - { type: Number, id: "value", name: "Value", allowMultipleConnections: false }
    - { type: Any, id: "high", name: "When Above Percentile", allowMultipleConnections: false }
    - { type: Any, id: "low", name: "When Below Percentile", allowMultipleConnections: false }
  outputs: [ANY_RESULT]
  tags: ["selection", "percentile", "statistics", "conditional", "flow-control"]
  category: ControlFlow
  renderKind: Standard

boolean_branch:
  name: Boolean Branch
  type: ControlFlow
  desc: "Splits a boolean signal into two separate outputs: one for true values and one for inverted (false) values."
  inputs:
    - { type: Boolean, id: "condition", name: "Condition", allowMultipleConnections: false }
  outputs:
    - { type: Boolean, id: "true", name: "True Path" }
    - { type: Boolean, id: "false", name: "False Path" }
  tags: ["branching", "boolean", "split", "flow-control", "signal-processing"]
  category: ControlFlow
  renderKind: Simple

ratio_branch:
  name: Ratio Branch
  desc: "Splits data based on the ratio between two values: high (above upper threshold), normal (between thresholds), and low (below lower threshold)."
  options:
    - id: threshold_high
      name: Upper Threshold
      type: Decimal
      default: 1.5
    - id: threshold_low
      name: Lower Threshold
      type: Decimal
      default: 0.5
  inputs:
    - { type: Decimal, id: "ratio", name: "Ratio", allowMultipleConnections: false }
  outputs:
    - { type: Boolean, id: "high", name: "High (Above Upper)" }
    - { type: Boolean, id: "normal", name: "Normal (Between)" }
    - { type: Boolean, id: "low", name: "Low (Below Lower)" }
  tags: ["branching", "ratio", "threshold", "flow-control", "multi-output"]
  category: ControlFlow
  renderKind: Standard

# ======== SMART MONEY CONCEPT (SMC) NODES ======== #
# These nodes implement advanced price action concepts

swing_highs_lows:
  name: Swing Highs and Lows
  desc: "Identifies swing high and low points in price data by finding local peaks and valleys within a specified lookback period."
  options:
    - id: swing_length
      name: Swing Length
      type: Integer
      default: 5
  outputs:
    - { type: Integer, id: "high_low", name: "High/Low Direction" }
    - { type: Decimal, id: "level", name: "Level" }
  tags: ["smc", "price-action", "swing", "pivot", "technical"]
  category: PriceAction
  renderKind: Standard
  plotKind: shl
  requiresTimeFrame: true
  requiredDataSources: ["h", "l"]

bos_choch:
  name: Break of Structure & Change of Character
  desc: "Detects Break of Structure (BOS) and Change of Character (CHOCH) patterns, which signal potential trend changes and market structure shifts."
  options:
    - id: close_break
      name: Use Close Price
      type: Boolean
      default: false
  inputs:
    - { type: Integer, id: "high_low", name: "High/Low Direction", allowMultipleConnections: false }
    - { type: Decimal, id: "level", name: "Level", allowMultipleConnections: false }
  outputs:
    - { type: Integer, id: "bos", name: "Break of Structure" }
    - { type: Integer, id: "choch", name: "Change of Character" }
    - { type: Decimal, id: "level", name: "Level" }
    - { type: Integer, id: "broken_index", name: "Broken Index" }
  tags: ["smc", "price-action", "market-structure", "technical", "trend"]
  category: PriceAction
  renderKind: Standard
  plotKind: bos_choch
  requiresTimeFrame: true
  requiredDataSources: ["o", "h", "l", "c"]

fair_value_gap:
  name: Fair Value Gap
  desc: "Identifies Fair Value Gaps (FVG) where price makes a significant move leaving an empty zone that often gets filled later, signaling potential reversal zones."
  options:
    - id: join_consecutive
      name: Join Consecutive Gaps
      type: Boolean
      default: true
  outputs:
    - { type: Integer, id: "fvg", name: "FVG Direction" }
    - { type: Decimal, id: "top", name: "Top" }
    - { type: Decimal, id: "bottom", name: "Bottom" }
    - { type: Integer, id: "mitigated_index", name: "Mitigated Index" }
  tags: ["smc", "price-action", "gap", "imbalance", "technical"]
  category: PriceAction
  renderKind: Standard
  plotKind: fvg
  requiresTimeFrame: true
  requiredDataSources: ["o", "h", "l", "c"]

liquidity:
  name: Liquidity
  desc: "Identifies clusters of swing highs or lows that are close to each other, representing areas where significant buyer/seller liquidity is present."
  options:
    - id: range_percent
      name: Range Percentage
      type: Decimal
      default: 0.001
  inputs:
    - { type: Integer, id: "high_low", name: "High/Low Direction", allowMultipleConnections: false }
    - { type: Decimal, id: "level", name: "Level", allowMultipleConnections: false }
  outputs:
    - { type: Decimal, id: "liquidity", name: "Liquidity Direction" }
    - { type: Decimal, id: "level", name: "Level" }
    - { type: Decimal, id: "end", name: "End Index" }
    - { type: Decimal, id: "swept", name: "Swept Index" }
  tags: ["smc", "price-action", "liquidity", "technical", "cluster"]
  category: PriceAction
  renderKind: Standard
  plotKind: liquidity
  requiresTimeFrame: true
  requiredDataSources: ["h", "l"]

order_blocks:
  name: Order Blocks
  desc: "Detects bullish and bearish order blocks which represent areas of significant institutional order flow, often acting as support and resistance zones."
  options:
    - id: close_mitigation
      name: Use Close for Mitigation
      type: Boolean
      default: false
  inputs:
    - { type: Integer, id: "high_low", name: "High/Low Direction", allowMultipleConnections: false }
  outputs:
    - { type: Integer, id: "ob", name: "Order Block Direction" }
    - { type: Decimal, id: "top", name: "Top" }
    - { type: Decimal, id: "bottom", name: "Bottom" }
    - { type: Decimal, id: "ob_volume", name: "Order Block Volume" }
    - { type: Integer, id: "mitigated_index", name: "Mitigated Index" }
    - { type: Decimal, id: "percentage", name: "Strength Percentage" }
  tags: ["smc", "price-action", "order-block", "institutional", "technical"]
  category: PriceAction
  renderKind: Standard
  plotKind: order_blocks
  requiresTimeFrame: true
  requiredDataSources: ["o", "h", "l", "c", "v"]

previous_high_low:
  name: Previous High Low
  desc: "Identifies the previous high or low levels within a given interval and tracks when current price breaks these levels."
  options:
    - id: interval
      name: Interval
      type: Integer
      default: 1
    - id: type
      name: Time Frame Type
      type: Select
      default: day
      selectOption:
        - { name: "Minute", value: "minute" }
        - { name: "Hour", value: "hour" }
        - { name: "Day", value: "day" }
        - { name: "Week", value: "week" }
        - { name: "Month", value: "month" }
  outputs:
    - { type: Decimal, id: "previous_high", name: "Previous High" }
    - { type: Decimal, id: "previous_low", name: "Previous Low" }
    - { type: Boolean, id: "broken_high", name: "Broken High" }
    - { type: Boolean, id: "broken_low", name: "Broken Low" }
  tags: ["smc", "price-action", "high-low", "technical", "breakout"]
  category: PriceAction
  renderKind: Standard
  plotKind: previous_high_low
  requiresTimeFrame: true
  requiredDataSources: ["o", "h", "l", "c", "v"]

retracements:
  name: Retracements
  desc: "Calculates percentage retracements from swing highs and lows, measuring how much price has pulled back from a prior swing point."
  inputs:
    - { type: Integer, id: "high_low", name: "High/Low Direction", allowMultipleConnections: false }
    - { type: Decimal, id: "level", name: "Level", allowMultipleConnections: false }
  outputs:
    - { type: Integer, id: "direction", name: "Direction" }
    - { type: Decimal, id: "current_retracement", name: "Current Retracement %" }
    - { type: Decimal, id: "deepest_retracement", name: "Deepest Retracement %" }
  tags: ["smc", "price-action", "retracement", "fibonacci", "technical"]
  category: PriceAction
  renderKind: Simple
  plotKind: retracements
  requiresTimeFrame: true
  requiredDataSources: ["h", "l"]

sessions:
  name: Trading Sessions
  type: Indicator
  desc: "Identifies active trading sessions (Sydney, Tokyo, London, New York) and key session-based 'kill zones' where significant price movements often occur."
  options:
    - id: session
      name: Session Type
      type: Select
      default: London
      selectOption:
        - { name: "Sydney (21:00-06:00 UTC)", value: "Sydney" }
        - { name: "Tokyo (00:00-09:00 UTC)", value: "Tokyo" }
        - { name: "London (07:00-16:00 UTC)", value: "London" }
        - { name: "New York (13:00-22:00 UTC)", value: "NewYork" }
        - { name: "Asian Kill Zone (00:00-04:00 UTC)", value: "AsianKillZone" }
        - { name: "London Open Kill Zone (06:00-09:00 UTC)", value: "LondonOpenKillZone" }
        - { name: "New York Kill Zone (11:00-14:00 UTC)", value: "NewYorkKillZone" }
        - { name: "London Close Kill Zone (14:00-16:00 UTC)", value: "LondonCloseKillZone" }
  outputs:
    - { type: Boolean, id: "active", name: "Session Active" }
    - { type: Decimal, id: "high", name: "Session High" }
    - { type: Decimal, id: "low", name: "Session Low" }
  tags: ["smc", "price-action", "session", "time-based", "kill-zone"]
  category: PriceAction
  renderKind: Standard
  plotKind: sessions
  requiresTimeFrame: true
  requiredDataSources: ["o", "h", "l", "c"]

# ======== VOLATILITY TRANSFORMS ======== #

acceleration_bands:
  name: Acceleration Bands
  desc: "Three bands that expand and contract based on price volatility. Middle band is a simple moving average, while upper and lower bands adjust dynamically with price acceleration."
  options:
    - id: period
      name: Period
      type: Integer
      default: 20
    - id: multiplier
      name: Multiplier
      type: Decimal
      default: 2.0
  outputs:
    - { type: Decimal, id: "upper_band", name: "Upper Band" }
    - { type: Decimal, id: "middle_band", name: "Middle Band" }
    - { type: Decimal, id: "lower_band", name: "Lower Band" }
  tags: ["overlay", "volatility", "bands", "price-channels", "technical"]
  category: Volatility
  renderKind: Standard
  plotKind: bbands
  requiresTimeFrame: true
  requiredDataSources: ["h", "l", "c"]

garman_klass:
  name: Garman-Klass Volatility
  desc: "Volatility estimator that uses open, high, low, and close prices, giving more weight to price ranges than traditional volatility measures. Designed to better capture market movements in continuous trading."
  options:
    - id: period
      name: Period
      type: Integer
      default: 14
    - id: trading_days
      name: Trading Days
      type: Integer
      default: 252
  outputs: [DECIMAL_RESULT]
  tags: ["indicator", "volatility", "risk", "technical", "range-based"]
  category: Volatility
  renderKind: Standard
  plotKind: panel_line
  requiresTimeFrame: true
  requiredDataSources: ["o", "h", "l", "c"]

hodges_tompkins:
  name: Hodges-Tompkins Volatility
  desc: "Modified volatility estimator that corrects bias in standard volatility calculations when using small sample sizes. More accurate for shorter time periods than traditional measures."
  options:
    - id: period
      name: Period
      type: Integer
      default: 14
    - id: trading_periods
      name: Trading Periods Per Year
      type: Integer
      default: 252
  outputs: [DECIMAL_RESULT]
  tags: ["indicator", "volatility", "risk", "bias-corrected", "technical"]
  category: Volatility
  renderKind: Standard
  plotKind: panel_line
  requiresTimeFrame: true
  requiredDataSources: ["c"]

keltner_channels:
  name: Keltner Channels
  desc: "Volatility-based envelope indicator that places bands around an exponential moving average. Uses average true range to set band width, making it responsive to volatility changes."
  options:
    - id: roll_period
      name: Rolling Period
      type: Integer
      default: 20
    - id: band_multiplier
      name: Band Multiplier
      type: Decimal
      default: 2.0
  outputs:
    - { type: Decimal, id: "upper_band", name: "Upper Band" }
    - { type: Decimal, id: "lower_band", name: "Lower Band" }
  tags: ["overlay", "volatility", "bands", "price-channels", "technical"]
  category: Volatility
  renderKind: Standard
  plotKind: bbands
  requiresTimeFrame: true
  requiredDataSources: ["h", "l", "c"]

parkinson:
  name: Parkinson Volatility
  desc: "Range-based volatility estimator that uses high and low prices rather than just closing prices. Better captures intraday price movements and is more efficient than close-to-close volatility."
  options:
    - id: period
      name: Period
      type: Integer
      default: 14
    - id: trading_periods
      name: Trading Periods Per Year
      type: Integer
      default: 252
  outputs: [DECIMAL_RESULT]
  tags: ["indicator", "volatility", "risk", "range-based", "technical"]
  category: Volatility
  renderKind: Standard
  plotKind: panel_line
  requiresTimeFrame: true
  requiredDataSources: ["h", "l"]

ulcer_index:
  name: Ulcer Index
  desc: "Risk measure that quantifies downside risk by measuring depth and duration of drawdowns. Higher values indicate deeper or longer drawdowns from recent highs."
  options:
    - id: period
      name: Period
      type: Integer
      default: 14
    - id: use_sum
      name: Use Sum
      type: Boolean
      default: false
  outputs: [DECIMAL_RESULT]
  tags: ["indicator", "volatility", "risk", "drawdown", "technical"]
  category: Volatility
  renderKind: Standard
  plotKind: panel_line
  requiresTimeFrame: true
  requiredDataSources: ["c"]

yang_zhang:
  name: Yang-Zhang Volatility
  desc: "Advanced volatility estimator that accounts for opening jumps and combines overnight and intraday volatility. Designed to be robust against price jumps and more accurate than simpler measures."
  options:
    - id: period
      name: Period
      type: Integer
      default: 14
    - id: trading_periods
      name: Trading Periods Per Year
      type: Integer
      default: 252
  outputs: [DECIMAL_RESULT]
  tags: ["indicator", "volatility", "risk", "technical", "complex"]
  category: Volatility
  renderKind: Standard
  plotKind: panel_line
  requiresTimeFrame: true
  requiredDataSources: ["o", "h", "l", "c"]

# ======== INDICATOR TRANSFORMS ======== #

chande_kroll_stop:
  name: Chande Kroll Stop
  desc: "Trend-following indicator that provides dynamic stop-loss levels. Combines volatility and moving averages to set appropriate stop points for both long and short positions."
  options:
    - id: p_period
      name: Price Period
      type: Integer
      default: 10
    - id: q_period
      name: ATR Period
      type: Integer
      default: 20
    - id: multiplier
      name: Multiplier
      type: Decimal
      default: 3.0
  outputs:
    - { type: Decimal, id: "long_stop", name: "Long Stop" }
    - { type: Decimal, id: "short_stop", name: "Short Stop" }
  tags: ["indicator", "trend", "stop-loss", "risk-management", "technical"]
  category: Trend
  renderKind: Standard
  plotKind: chande_kroll_stop
  requiresTimeFrame: true
  requiredDataSources: ["c", "h", "l"]

elders_thermometer:
  name: Elder's Force Index Thermometer
  desc: "Measures buying and selling pressure using price movement and volume. Generates buy and sell signals when pressure reaches extreme levels defined by threshold factors."
  options:
    - id: period
      name: Period
      type: Integer
      default: 13
    - id: buy_factor
      name: Buy Factor
      type: Decimal
      default: 0.5
    - id: sell_factor
      name: Sell Factor
      type: Decimal
      default: 0.5
  outputs:
    - { type: Decimal, id: "result", name: "Force Index" }
    - { type: Decimal, id: "ema", name: "EMA of Force Index" }
    - { type: Boolean, id: "buy_signal", name: "Buy Signal" }
    - { type: Boolean, id: "sell_signal", name: "Sell Signal" }
  tags: ["indicator", "volume", "price", "momentum", "signals"]
  category: Momentum
  renderKind: Standard
  plotKind: elders
  requiresTimeFrame: true
  requiredDataSources: ["h", "l"]

hurst_exponent:
  name: Hurst Exponent
  desc: "Measures the long-term memory or persistence of a time series. Values above 0.5 indicate trend-following behavior, while values below 0.5 suggest mean-reverting tendencies."
  inputs: [NUMBER]
  options:
    - id: min_period
      name: Minimum Period
      type: Integer
      default: 1
  outputs:
    - { type: Decimal, id: "result", name: "Hurst Exponent" }
  tags: ["indicator", "fractal", "time-series", "trend", "mean-reversion"]
  category: Momentum
  renderKind: Standard
  plotKind: panel_line

rolling_hurst_exponent:
  name: Rolling Hurst Exponent
  desc: "Calculates the Hurst exponent over a rolling window of data. Provides insights into changing market behavior between trending and mean-reverting regimes."
  inputs: [NUMBER]
  options:
    - id: window
      name: Window Size
      type: Integer
      default: 100
  outputs:
    - { type: Decimal, id: "result", name: "Rolling Hurst Exponent" }
  tags: ["indicator", "fractal", "time-series", "rolling", "regime-change"]
  category: Momentum
  renderKind: Standard
  plotKind: panel_line

pivot_point_sr:
  name: Pivot Points with Support/Resistance
  desc: "Calculates classical pivot points with multiple levels of support and resistance. Used to identify potential reversal zones and price targets."
  outputs:
    - { type: Decimal, id: "pivot", name: "Pivot Point" }
    - { type: Decimal, id: "resist_1", name: "Resistance 1" }
    - { type: Decimal, id: "support_1", name: "Support 1" }
    - { type: Decimal, id: "resist_2", name: "Resistance 2" }
    - { type: Decimal, id: "support_2", name: "Support 2" }
    - { type: Decimal, id: "resist_3", name: "Resistance 3" }
    - { type: Decimal, id: "support_3", name: "Support 3" }
  tags: ["indicator", "support-resistance", "pivot", "reversal", "levels"]
  category: PriceAction
  renderKind: Simple
  plotKind: h_line
  requiresTimeFrame: true
  requiredDataSources: ["h", "l", "c"]

price_distance:
  name: Price Distance
  type: Indicator
  desc: "Measures the relative distance between key price points (open, high, low, close) in a single bar. Quantifies volatility and the shape of price movement within periods."
  outputs: [DECIMAL_RESULT]
  tags: ["indicator", "price-action", "volatility", "intrabar", "technical"]
  category: Volatility
  renderKind: Simple
  plotKind: column
  requiresTimeFrame: true
  requiredDataSources: ["o", "h", "l", "c"]

psl:
  name: Price Swing Label
  desc: "Identifies and labels price swings as bullish or bearish based on recent price action. Helps detect trend changes and potential reversal points."
  options:
    - id: period
      name: Period
      type: Integer
      default: 10
  outputs:
    - { type: Decimal, id: "result", name: "Swing Label" }
  tags: ["indicator", "price-action", "swing", "trend-change", "reversal"]
  category: PriceAction
  renderKind: Standard
  plotKind: column
  requiresTimeFrame: true
  requiredDataSources: ["o", "c"]

qqe:
  name: Quantitative Qualitative Estimation
  desc: "Enhanced RSI-based indicator with smoothing and adaptive bands. Generates potential trading signals when price crosses the upper or lower threshold lines."
  options:
    - id: avg_period
      name: Average Period
      type: Integer
      default: 14
    - id: smooth_period
      name: Smoothing Period
      type: Integer
      default: 5
    - id: width_factor
      name: Width Factor
      type: Decimal
      default: 4.236
  outputs:
    - { type: Decimal, id: "result", name: "QQE" }
    - { type: Decimal, id: "rsi_ma", name: "RSI Moving Average" }
    - { type: Decimal, id: "long_line", name: "Long Threshold" }
    - { type: Decimal, id: "short_line", name: "Short Threshold" }
  tags: ["indicator", "oscillator", "rsi-based", "adaptive", "signals"]
  category: Momentum
  renderKind: Standard
  plotKind: qqe
  requiresTimeFrame: true
  requiredDataSources: ["c"]

vortex:
  name: Vortex Indicator
  desc: "Identifies the start of new trends and trend direction using price movement patterns. Comprised of two lines that cross during trend changes."
  options:
    - id: period
      name: Period
      type: Integer
      default: 14
  outputs:
    - { type: Decimal, id: "plus_indicator", name: "VI+" }
    - { type: Decimal, id: "minus_indicator", name: "VI-" }
  tags: ["indicator", "trend", "crossover", "direction", "technical"]
  category: Momentum
  renderKind: Standard
  plotKind: vortex
  requiresTimeFrame: true
  requiredDataSources: ["h", "l", "c"]

trade_executor_adapter:
  name: Trade Executor Adapter
  desc: "Converts numerical trade signal/value (Positive, Negative) into boolean long and short execution flags. Used for connecting signal generators to execution components."
  inputs: [NUMBER]
  outputs:
    - { type: Boolean, id: "long", name: "Long" }
    - { type: Boolean, id: "short", name: "Short" }
  tags: ["signal", "adapter", "trade", "position", "boolean"]
  category: ControlFlow
  renderKind: Simple

# ======== CUSTOM OVERLAYS & STATISTICS ======== #

donchian_channel:
  name: Donchian Channel
  desc: "Price channel with upper and lower bands from rolling high/low and a middle line as their average. Useful for breakouts and trend following."
  options:
    - { id: window, name: Window, type: Integer, default: 20, min: 1, max: 10000, step_size: 1 }
  outputs:
    - { type: Decimal, id: "bbands_upper", name: "Upper" }
    - { type: Decimal, id: "bbands_middle", name: "Middle" }
    - { type: Decimal, id: "bbands_lower", name: "Lower" }
  tags: ["overlay", "trend", "bands", "price-channels", "breakout"]
  category: Trend
  renderKind: Standard
  plotKind: bbands
  requiresTimeFrame: true
  requiredDataSources: ["h", "l"]

ichimoku:
  name: Ichimoku Cloud
  desc: "Multi-line trend system: Tenkan-sen, Kijun-sen, Senkou Span A/B (cloud), and Chikou span."
  options:
    - { id: p_tenkan, name: Tenkan Period, type: Integer, default: 9, min: 1, max: 10000, step_size: 1 }
    - { id: p_kijun, name: Kijun Period, type: Integer, default: 26, min: 1, max: 10000, step_size: 1 }
    - { id: p_senkou_b, name: Senkou B Period, type: Integer, default: 52, min: 1, max: 10000, step_size: 1 }
  outputs:
    - { type: Decimal, id: "tenkan", name: "Tenkan-sen" }
    - { type: Decimal, id: "kijun", name: "Kijun-sen" }
    - { type: Decimal, id: "senkou_a", name: "Senkou A" }
    - { type: Decimal, id: "senkou_b", name: "Senkou B" }
    - { type: Decimal, id: "chikou", name: "Chikou Span" }
  tags: ["overlay", "trend", "cloud", "multi-line", "price-channels"]
  category: Trend
  renderKind: Standard
  plotKind: ichimoku
  requiresTimeFrame: true
  requiredDataSources: ["h", "l", "c"]

zscore:
  name: Z-Score
  desc: "Rolling z-score of the input series: (x_t - mean)/stddev over the configured window."
  inputs: [NUMBER]
  options:
    - { id: window, name: Window, type: Integer, default: 20, min: 1, max: 10000, step_size: 1 }
  outputs: [DECIMAL_RESULT]
  tags: ["indicator", "statistics", "normalization", "standardization"]
  category: Statistical
  renderKind: Standard
  plotKind: panel_line

# ======== HIDDEN MARKOV MODEL (HMM) REGIME DETECTION ======== #

hmm_2:
  name: Hidden Markov Model (2 States)
  desc: "Gaussian HMM for regime detection and probabilities over multiple input features."
  options:
    - { id: max_iterations, name: Max Iterations, type: Integer, default: 1000, min: 1, step_size: 1 }
    - { id: tolerance, name: Convergence Tolerance, type: Decimal, default: 0.00001, min: 0.0 }
    - { id: compute_zscore, name: Z-Score Normalize, type: Boolean, default: true }
    - { id: min_training_samples, name: Min Training Samples, type: Integer, default: 100, min: 1 }
    - { id: lookback_window, name: Lookback Window, type: Integer, default: 0, min: 0 }
  inputs:
    - { type: Number, id: "*", name: "Features", allowMultipleConnections: true }
  outputs:
    - { type: Integer, id: "state", name: "State" }
    - { type: Decimal, id: "prob_state_0", name: "P(State 0)" }
    - { type: Decimal, id: "prob_state_1", name: "P(State 1)" }
    - { type: Decimal, id: "trans_to_state_0", name: "P(Transition→0)" }
    - { type: Decimal, id: "trans_to_state_1", name: "P(Transition→1)" }
    - { type: Decimal, id: "state_persistence", name: "State Persistence" }
  tags: ["hmm", "regime", "statistical", "state", "volatility"]
  category: Statistical
  renderKind: Standard

hmm_3:
  name: Hidden Markov Model (3 States)
  desc: "Gaussian HMM for regime detection and probabilities over multiple input features."
  options:
    - { id: max_iterations, name: Max Iterations, type: Integer, default: 1000, min: 1, step_size: 1 }
    - { id: tolerance, name: Convergence Tolerance, type: Decimal, default: 0.00001, min: 0.0 }
    - { id: compute_zscore, name: Z-Score Normalize, type: Boolean, default: true }
    - { id: min_training_samples, name: Min Training Samples, type: Integer, default: 100, min: 1 }
    - { id: lookback_window, name: Lookback Window, type: Integer, default: 0, min: 0 }
  inputs:
    - { type: Number, id: "*", name: "Features", allowMultipleConnections: true }
  outputs:
    - { type: Integer, id: "state", name: "State" }
    - { type: Decimal, id: "prob_state_0", name: "P(State 0)" }
    - { type: Decimal, id: "prob_state_1", name: "P(State 1)" }
    - { type: Decimal, id: "prob_state_2", name: "P(State 2)" }
    - { type: Decimal, id: "trans_to_state_0", name: "P(Transition→0)" }
    - { type: Decimal, id: "trans_to_state_1", name: "P(Transition→1)" }
    - { type: Decimal, id: "trans_to_state_2", name: "P(Transition→2)" }
    - { type: Decimal, id: "state_persistence", name: "State Persistence" }
  tags: ["hmm", "regime", "statistical", "state", "volatility"]
  category: Statistical
  renderKind: Standard

hmm_4:
  name: Hidden Markov Model (4 States)
  desc: "Gaussian HMM for regime detection and probabilities over multiple input features."
  options:
    - { id: max_iterations, name: Max Iterations, type: Integer, default: 1000, min: 1, step_size: 1 }
    - { id: tolerance, name: Convergence Tolerance, type: Decimal, default: 0.00001, min: 0.0 }
    - { id: compute_zscore, name: Z-Score Normalize, type: Boolean, default: true }
    - { id: min_training_samples, name: Min Training Samples, type: Integer, default: 100, min: 1 }
    - { id: lookback_window, name: Lookback Window, type: Integer, default: 0, min: 0 }
  inputs:
    - { type: Number, id: "*", name: "Features", allowMultipleConnections: true }
  outputs:
    - { type: Integer, id: "state", name: "State" }
    - { type: Decimal, id: "prob_state_0", name: "P(State 0)" }
    - { type: Decimal, id: "prob_state_1", name: "P(State 1)" }
    - { type: Decimal, id: "prob_state_2", name: "P(State 2)" }
    - { type: Decimal, id: "prob_state_3", name: "P(State 3)" }
    - { type: Decimal, id: "trans_to_state_0", name: "P(Transition→0)" }
    - { type: Decimal, id: "trans_to_state_1", name: "P(Transition→1)" }
    - { type: Decimal, id: "trans_to_state_2", name: "P(Transition→2)" }
    - { type: Decimal, id: "trans_to_state_3", name: "P(Transition→3)" }
    - { type: Decimal, id: "state_persistence", name: "State Persistence" }
  tags: ["hmm", "regime", "statistical", "state", "volatility"]
  category: Statistical
  renderKind: Standard

# ======== SCALAR AGGREGATIONS (Apache Arrow) ======== #

scalar_mean:
  name: Scalar Mean
  desc: "Mean over the entire input series, emitted as a single-row result at the last index."
  options:
    - { id: skip_nulls, name: Skip Nulls, type: Boolean, default: true }
    - { id: min_count, name: Min Count, type: Integer, default: 1, min: 0 }
  inputs: [NUMBER]
  outputs: [DECIMAL_RESULT]
  tags: ["aggregate", "scalar", "statistics", "mean"]
  category: Aggregate
  renderKind: Standard

scalar_sum:
  name: Scalar Sum
  desc: "Sum over the entire input series, emitted as a single-row result at the last index."
  options:
    - { id: skip_nulls, name: Skip Nulls, type: Boolean, default: true }
    - { id: min_count, name: Min Count, type: Integer, default: 1, min: 0 }
  inputs: [NUMBER]
  outputs: [DECIMAL_RESULT]
  tags: ["aggregate", "scalar", "statistics", "sum"]
  category: Aggregate
  renderKind: Standard

scalar_min:
  name: Scalar Min
  desc: "Minimum value over the entire input series."
  options:
    - { id: skip_nulls, name: Skip Nulls, type: Boolean, default: true }
    - { id: min_count, name: Min Count, type: Integer, default: 1, min: 0 }
  inputs: [NUMBER]
  outputs: [DECIMAL_RESULT]
  tags: ["aggregate", "scalar", "min"]
  category: Aggregate
  renderKind: Standard

scalar_max:
  name: Scalar Max
  desc: "Maximum value over the entire input series."
  options:
    - { id: skip_nulls, name: Skip Nulls, type: Boolean, default: true }
    - { id: min_count, name: Min Count, type: Integer, default: 1, min: 0 }
  inputs: [NUMBER]
  outputs: [DECIMAL_RESULT]
  tags: ["aggregate", "scalar", "max"]
  category: Aggregate
  renderKind: Standard

scalar_stddev:
  name: Scalar StdDev
  desc: "Standard deviation over the entire input series."
  options:
    - { id: skip_nulls, name: Skip Nulls, type: Boolean, default: true }
    - { id: min_count, name: Min Count, type: Integer, default: 1, min: 0 }
    - { id: ddof, name: Delta Degrees of Freedom, type: Integer, default: 1, min: 0 }
  inputs: [NUMBER]
  outputs: [DECIMAL_RESULT]
  tags: ["aggregate", "scalar", "statistics", "stddev"]
  category: Statistical
  renderKind: Standard

scalar_variance:
  name: Scalar Variance
  desc: "Variance over the entire input series."
  options:
    - { id: skip_nulls, name: Skip Nulls, type: Boolean, default: true }
    - { id: min_count, name: Min Count, type: Integer, default: 1, min: 0 }
    - { id: ddof, name: Delta Degrees of Freedom, type: Integer, default: 1, min: 0 }
  inputs: [NUMBER]
  outputs: [DECIMAL_RESULT]
  tags: ["aggregate", "scalar", "statistics", "variance"]
  category: Statistical
  renderKind: Standard

scalar_quantile:
  name: Scalar Quantile
  desc: "Quantile over the entire input series."
  options:
    - { id: skip_nulls, name: Skip Nulls, type: Boolean, default: true }
    - { id: min_count, name: Min Count, type: Integer, default: 1, min: 0 }
    - { id: quantile, name: Quantile, type: Decimal, default: 0.5, min: 0.0, max: 1.0 }
  inputs: [NUMBER]
  outputs: [DECIMAL_RESULT]
  tags: ["aggregate", "scalar", "statistics", "quantile"]
  category: Statistical
  renderKind: Standard

scalar_count:
  name: Scalar Count
  desc: "Count of values in the input series."
  options:
    - { id: skip_nulls, name: Skip Nulls, type: Boolean, default: true }
  inputs: [NUMBER]
  outputs: [NUMBER_RESULT]
  tags: ["aggregate", "scalar", "count"]
  category: Aggregate
  renderKind: Standard

scalar_count_all:
  name: Scalar Count All
  desc: "Count of all values including nulls."
  options: []
  inputs: [NUMBER]
  outputs: [NUMBER_RESULT]
  tags: ["aggregate", "scalar", "count"]
  category: Aggregate
  renderKind: Standard

scalar_count_distinct:
  name: Scalar Count Distinct
  desc: "Count of distinct values in the input series."
  options: []
  inputs:
    - { type: Any, id: "*", name: "Values", allowMultipleConnections: false }
  outputs: [NUMBER_RESULT]
  tags: ["aggregate", "scalar", "count", "distinct"]
  category: Aggregate
  renderKind: Standard

scalar_all:
  name: Scalar All
  desc: "True if all values are true."
  options:
    - { id: skip_nulls, name: Skip Nulls, type: Boolean, default: true }
    - { id: min_count, name: Min Count, type: Integer, default: 1, min: 0 }
  inputs: [BOOLEAN]
  outputs: [BOOLEAN_RESULT]
  tags: ["aggregate", "scalar", "boolean", "all"]
  category: Aggregate
  renderKind: Standard

scalar_any:
  name: Scalar Any
  desc: "True if any value is true."
  options:
    - { id: skip_nulls, name: Skip Nulls, type: Boolean, default: true }
    - { id: min_count, name: Min Count, type: Integer, default: 1, min: 0 }
  inputs: [BOOLEAN]
  outputs: [BOOLEAN_RESULT]
  tags: ["aggregate", "scalar", "boolean", "any"]
  category: Aggregate
  renderKind: Standard

scalar_first:
  name: Scalar First
  desc: "First value in the input series."
  options:
    - { id: skip_nulls, name: Skip Nulls, type: Boolean, default: true }
    - { id: min_count, name: Min Count, type: Integer, default: 1, min: 0 }
  inputs: [NUMBER]
  outputs: [DECIMAL_RESULT]
  tags: ["aggregate", "scalar", "first"]
  category: Aggregate
  renderKind: Standard

scalar_last:
  name: Scalar Last
  desc: "Last value in the input series."
  options:
    - { id: skip_nulls, name: Skip Nulls, type: Boolean, default: true }
    - { id: min_count, name: Min Count, type: Integer, default: 1, min: 0 }
  inputs: [NUMBER]
  outputs: [DECIMAL_RESULT]
  tags: ["aggregate", "scalar", "last"]
  category: Aggregate
  renderKind: Standard

scalar_first_last:
  name: Scalar First/Last
  desc: "First and last values over the entire input series."
  options:
    - { id: skip_nulls, name: Skip Nulls, type: Boolean, default: true }
    - { id: min_count, name: Min Count, type: Integer, default: 1, min: 0 }
  inputs: [NUMBER]
  outputs:
    - { type: Decimal, id: "result#first", name: "First" }
    - { type: Decimal, id: "result#last", name: "Last" }
  tags: ["aggregate", "scalar", "first", "last"]
  category: Aggregate
  renderKind: Standard

scalar_min_max:
  name: Scalar Min/Max
  desc: "Minimum and maximum values over the entire input series."
  options:
    - { id: skip_nulls, name: Skip Nulls, type: Boolean, default: true }
    - { id: min_count, name: Min Count, type: Integer, default: 1, min: 0 }
  inputs: [NUMBER]
  outputs:
    - { type: Decimal, id: "result#min", name: "Min" }
    - { type: Decimal, id: "result#max", name: "Max" }
  tags: ["aggregate", "scalar", "min", "max"]
  category: Aggregate
  renderKind: Standard

scalar_mode:
  name: Scalar Mode
  desc: "Most frequent value and its count."
  options:
    - { id: skip_nulls, name: Skip Nulls, type: Boolean, default: true }
    - { id: min_count, name: Min Count, type: Integer, default: 1, min: 0 }
  inputs: [NUMBER]
  outputs:
    - { type: Decimal, id: "result#mode", name: "Mode" }
    - { type: Number, id: "result#count", name: "Count" }
  tags: ["aggregate", "scalar", "mode"]
  category: Statistical
  renderKind: Standard

scalar_index:
  name: Scalar Index
  desc: "Index of the matching value based on the function's criteria."
  options: []
  inputs: [NUMBER]
  outputs: [NUMBER_RESULT]
  tags: ["aggregate", "scalar", "index"]
  category: Utility
  renderKind: Standard

scalar_product:
  name: Scalar Product
  desc: "Product over the entire input series."
  options:
    - { id: skip_nulls, name: Skip Nulls, type: Boolean, default: true }
    - { id: min_count, name: Min Count, type: Integer, default: 1, min: 0 }
  inputs: [NUMBER]
  outputs: [DECIMAL_RESULT]
  tags: ["aggregate", "scalar", "product"]
  category: Math
  renderKind: Standard

scalar_approximate_median:
  name: Scalar Approximate Median
  desc: "Approximate median over the entire input series."
  options:
    - { id: skip_nulls, name: Skip Nulls, type: Boolean, default: true }
    - { id: min_count, name: Min Count, type: Integer, default: 1, min: 0 }
  inputs: [NUMBER]
  outputs: [DECIMAL_RESULT]
  tags: ["aggregate", "scalar", "median"]
  category: Statistical
  renderKind: Standard

scalar_kurtosis:
  name: Scalar Kurtosis
  desc: "Kurtosis over the entire input series."
  options: []
  inputs: [NUMBER]
  outputs: [DECIMAL_RESULT]
  tags: ["aggregate", "scalar", "kurtosis"]
  category: Statistical
  renderKind: Standard

scalar_skew:
  name: Scalar Skew
  desc: "Skewness over the entire input series."
  options: []
  inputs: [NUMBER]
  outputs: [DECIMAL_RESULT]
  tags: ["aggregate", "scalar", "skew"]
  category: Statistical
  renderKind: Standard

scalar_tdigest:
  name: Scalar T-Digest
  desc: "T-Digest based aggregate (e.g., quantile estimation)."
  options:
    - { id: skip_nulls, name: Skip Nulls, type: Boolean, default: true }
    - { id: min_count, name: Min Count, type: Integer, default: 1, min: 0 }
    - { id: quantile, name: Quantile, type: Decimal, default: 0.5, min: 0.0, max: 1.0 }
  inputs: [NUMBER]
  outputs: [DECIMAL_RESULT]
  tags: ["aggregate", "scalar", "tdigest", "quantile"]
  category: Statistical
  renderKind: Standard